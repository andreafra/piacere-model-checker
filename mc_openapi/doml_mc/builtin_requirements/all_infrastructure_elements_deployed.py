from z3 import And, Const, Consts, Exists, ExprRef, Not, Or, Solver, Implies
from mc_openapi.doml_mc.imc import Requirement, SMTEncoding, SMTSorts
from mc_openapi.doml_mc.intermediate_model import DOMLVersion, IntermediateModel
from mc_openapi.doml_mc.error_desc_helper import get_user_friendly_name
from . import CELEMS_V2_0

# Provider > elements generated by IOP only have "commons_DOMLElement::annotations" as an association
# and do not have maps. Also networks are not generated by the IOP. But they are the same class
# (concrete_infrastructure), so I can't make distinction.

def all_infrastructure_elements_deployed(smtenc: SMTEncoding, smtsorts: SMTSorts) -> ExprRef:
    """Checks:
        - infrastructure_VMImage
        - infrastructure_Network
        - infrastructure_Storage
        - infrastructure_FunctionAsAService
        - infrastructure_ComputingGroup
    """
    def checkOneClass(ielem, cinfr, provider, celem, ielemClass, providerAssoc, celemAssoc):
        return And(
            smtenc.element_class_fun(ielem) == smtenc.classes[ielemClass],
            Not(
                Exists(
                    [provider, celem],
                    And(
                        smtenc.association_rel(
                            cinfr, smtenc.associations["concrete_ConcreteInfrastructure::providers"], provider),
                        smtenc.association_rel(
                            provider, smtenc.associations[providerAssoc], celem),
                        smtenc.association_rel(
                            celem, smtenc.associations[celemAssoc], ielem)
                    )
                )
            )
        )

    ielem, concr, provider, celem, asg = Consts("ielem concr provider celem asg", smtsorts.element_sort)
    return And(
        smtenc.element_class_fun(
            concr) == smtenc.classes["concrete_ConcreteInfrastructure"],
        Or(
            *(
                checkOneClass(
                    ielem, concr, provider, celem,
                    ielemClass, providerAssoc, celemAssoc
                ) 
                for ielemClass, providerAssoc, celemAssoc in CELEMS_V2_0
                if ielemClass != 'infrastructure_VirtualMachine' # handle special case separately below
            ),
        )
    )


def ed_all_infrastructure_elements_deployed(solver: Solver, smtsorts: SMTSorts, intermediate_model: IntermediateModel) -> str:
    try:
        ielem = Const("ielem", smtsorts.element_sort)
        ielem_name = get_user_friendly_name(
            intermediate_model, solver.model(), ielem)
        if ielem_name:
            return f"Abstract infrastructure element '{ielem_name}' is not mapped to any element in the active concretization."
    except:
        return "An abstract infrastructure element has is not mapped to any element in the active concretization."

MSG = "All abstract infrastructure elements are mapped to an element in the active concretization."

ALL_INFRASTRUCTURE_ELEMENTS_DEPLOYED = (
    all_infrastructure_elements_deployed,
    "all_infrastructure_elements_deployed",
    MSG,
    ed_all_infrastructure_elements_deployed
)