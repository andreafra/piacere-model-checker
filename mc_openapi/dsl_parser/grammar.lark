start: expression

expression  : "(" expression ")"
            | QUANTIFIER consts "(" expression ")"       -> quantification
            | binary_op_exp
            | NOT expression                            -> negation
            | CONST ASSOCIATION_OP RELATIONSHIP CONST   -> association_expr
            | CONST ATTRIBUTE_OP RELATIONSHIP VALUE     -> attribute_expr
            | class_or_const IS class_or_const          -> equal
            | class_or_const IS_NOT class_or_const      -> not_equal

binary_op_exp   : double_implication
                | implication
                | and_or_xor_exp

double_implication: expression DOUBLE_IMPLIES expression
implication: expression IMPLIES expression
and_or_xor_exp: expression (AND|OR|XOR) expression

// consts_declaration: "const" [CONST ("," CONST)*]
// values_declaration: "value" [VALUE ("," VALUE)*]
class_or_const: CLASS|CONST
consts: [CONST ("," CONST)*]

// Operators
DOUBLE_IMPLIES  : "<=>"
                |"iff"
IMPLIES         : "=>"
                |"implies"
AND             : "and"
OR              : "or"
XOR             : "xor"

QUANTIFIER: "exists"|"forall"
IS: "is"
IS_NOT: "is not"
NOT: "not"

ASSOCIATION_OP: "has association"
ATTRIBUTE_OP: "has attribute"

// Values

// regex: /[a-zA-Z]+_[a-zA-Z]+::[a-zA-Z]+/
//RELATIONSHIP: (LCASE_LETTER) ("_"|"::"|LETTER|DIGIT)*
RELATIONSHIP: /[^\W\d_]+\.[^\W\d_]+->[^\W\d_]+/

//CLASS: (LCASE_LETTER) ("_"|LETTER|DIGIT)*
CLASS: /[^\W\d_]+\.[^\W\d_]+/

// Must start with lowercase letter
CONST: (LCASE_LETTER) ("_"|LETTER|DIGIT)*
// Must start with uppercase letter
VALUE: (UCASE_LETTER) ("_"|LETTER|DIGIT)*



%import common.LETTER
%import common.DIGIT
%import common.LCASE_LETTER
%import common.UCASE_LETTER
%import common.WS
%ignore WS