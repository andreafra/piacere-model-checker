start: requirements

requirements    : ">" requirement (requirements)*

requirement     : req_name expression "---" error_desc

req_name        : ESCAPED_STRING
error_desc      : ESCAPED_STRING

expression      : "(" expression ")"
                | QUANTIFIER bound_consts "(" expression ")"       -> quantification
                | binary_op_exp
                | NOT expression                            -> negation
                | CONST ASSOCIATION_OP RELATIONSHIP CONST   -> association_expr
                | CONST ATTRIBUTE_OP RELATIONSHIP VALUE     -> attribute_expr
                | class_or_const IS class_or_const          -> equal
                | class_or_const IS_NOT class_or_const      -> not_equal

binary_op_exp   : double_implication
                | implication
                | and_or_xor_exp

double_implication: expression DOUBLE_IMPLIES expression
implication     : expression IMPLIES expression
and_or_xor_exp  : expression (AND|OR|XOR) expression

// consts_declaration: "const" [CONST ("," CONST)*]
// values_declaration: "value" [VALUE ("," VALUE)*]
class_or_const  : "class" CLASS
                | CONST
bound_consts    : [CONST ("," CONST)*]


// Operators
DOUBLE_IMPLIES  : "<=>"
                |"iff"i
IMPLIES         : "=>"
                |"implies"i
AND             : "and"i
OR              : "or"i
XOR             : "xor"i

QUANTIFIER      : "exists"i
                |"forall"i
IS              : "is"i
IS_NOT          : "is not"i
NOT             : "not"i

ASSOCIATION_OP  : "has association"
ATTRIBUTE_OP    : "has attribute"

// Values

// regex: /[a-zA-Z]+_[a-zA-Z]+::[a-zA-Z]+/
//RELATIONSHIP: (LCASE_LETTER) ("_"|"::"|LETTER|DIGIT)*
RELATIONSHIP: /[^\W\d_]+\.[^\W\d_]+->[^\W\d_]+/

//CLASS: (LCASE_LETTER) ("_"|LETTER|DIGIT)*
CLASS: /[^\W\d_]+\.[^\W\d_]+/

// Must start with lowercase letter
CONST: (LCASE_LETTER) ("_"|LETTER|DIGIT)*
// Must start with uppercase letter
VALUE: (UCASE_LETTER) ("_"|LETTER|DIGIT)*

// Comment: python/sh style
COMMENT: /#[^\n]*/

%import common.ESCAPED_STRING
%import common.NEWLINE
%import common.LETTER
%import common.DIGIT
%import common.LCASE_LETTER
%import common.UCASE_LETTER
%import common.WS
%ignore WS
%ignore COMMENT